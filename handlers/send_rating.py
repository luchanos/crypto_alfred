from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message

from clients.users_api_client import get_user, send_rating_to_user
from keyboards import confirmation_send_rating_keyboard, main_keyboard, stop_send_rating_keyboard
from setup_bot import dp


class FormSendRating(StatesGroup):
    wallet = State()
    amount = State()


async def my_wallet(message: Message):
    user = await get_user(message.from_user.id)
    if user:
        await message.answer(
            text=f"–¢–≤–æ–π –∫–æ—à–µ–ª–µ–∫: {message.from_user.id}\n–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {user.get('total_rating')}"
        )


async def send_rating(message: Message):
    await FormSendRating.wallet.set()
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", reply_markup=stop_send_rating_keyboard)


async def process_wallet_invalid(message: Message):
    await message.answer(
        text="–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –µ—â–µ —Ä–∞–∑",
        reply_markup=stop_send_rating_keyboard,
    )


async def process_wallet(message: Message, state: FSMContext):
    to_user = await get_user(message.text)
    from_user = await get_user(message.from_user.id)
    if to_user.get("user_id"):
        async with state.proxy() as data:
            data["wallet"] = message.text

        await FormSendRating.next()
        await message.answer(
            text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.\n–î–æ—Å—Ç—É–ø–Ω–æ: {from_user.get('total_rating')}",
            reply_markup=stop_send_rating_keyboard,
        )
    else:
        await FormSendRating.wallet.set()
        await message.answer(
            text="–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫", reply_markup=stop_send_rating_keyboard
        )


async def process_rating_value_invalid_zero(message: Message):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω—å—à–µ 1", reply_markup=stop_send_rating_keyboard)


async def process_rating_value_invalid(message: Message):
    await message.answer(
        text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º ! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–µ–π—Ç–∏–Ω–≥–∞ –µ—â–µ —Ä–∞–∑",
        reply_markup=stop_send_rating_keyboard,
    )


async def process_rating_value(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["amount"] = message.text

    await message.answer(
        text=f"–†–µ–π—Ç–∏–Ω–≥: {data['amount']}\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data['wallet']}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
        reply_markup=confirmation_send_rating_keyboard,
    )


@dp.message_handler(state="*", commands="–î–∞")
async def sure_send(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    async with state.proxy() as data:
        from_user = message.from_user.id
        to_user = data["wallet"]
        amount = data["amount"]
        res = await send_rating_to_user(from_user, to_user, amount)
        if res.get("Success"):
            await message.answer(text=f"–£—Å–ø–µ—à–Ω–æ!", reply_markup=main_keyboard)
            await message.bot.send_message(chat_id=to_user, text=f"–í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –æ—á–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        elif res.get("detail") == f"User {from_user} has no sufficient rating on deposit":
            await message.answer(text="–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!", reply_markup=main_keyboard)
        elif res.get("detail") == f"User with user_id {to_user} not found":
            await message.answer(text="–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!!", reply_markup=main_keyboard)

    await state.finish()


@dp.message_handler(state="*", commands="–ù–µ—Ç")
async def not_sure_send(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.answer(text="–•–æ—Ä–æ—à–æ!", reply_markup=main_keyboard)


@dp.message_handler(state="*", commands="–û—Ç–º–µ–Ω–∞ ‚ùå")
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.answer(text="–û–∫, –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)


def register_handlers_send_rating(dp: Dispatcher):
    dp.register_message_handler(my_wallet, Text(equals=f"–ú–æ–π –∫–æ—à–µ–ª–µ–∫ üí∞"))

    dp.register_message_handler(send_rating, Text(equals=f"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–π—Ç–∏–Ω–≥–æ–º üí∏"))

    dp.register_message_handler(cancel_handler, Text(equals="–û—Ç–º–µ–Ω–∞ ‚ùå", ignore_case=True), state="*")
    dp.register_message_handler(sure_send, Text(equals="–î–∞", ignore_case=True), state="*")
    dp.register_message_handler(not_sure_send, Text(equals="–ù–µ—Ç", ignore_case=True), state="*")

    dp.register_message_handler(
        process_wallet_invalid, lambda message: not message.text.isdigit(), state=FormSendRating.wallet
    )

    dp.register_message_handler(
        process_wallet, lambda message: message.text.isdigit(), state=FormSendRating.wallet
    )

    dp.register_message_handler(
        process_rating_value_invalid, lambda message: not message.text.isdigit(), state=FormSendRating.amount
    )

    dp.register_message_handler(
        process_rating_value_invalid_zero, lambda message: int(message.text) < 1, state=FormSendRating.amount
    )

    dp.register_message_handler(
        process_rating_value, lambda message: message.text.isdigit(), state=FormSendRating.amount
    )
