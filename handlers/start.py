from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from clients.tg_client import create_invite_link
from clients.users_api_client import get_user, is_deleted_user, recreate_user, register_new_user
from keyboards import accept_rules_keyboard, main_keyboard


class FormAcceptRules(StatesGroup):
    accept_rules = State()


async def start(message: types.Message) -> None:
    user = await get_user(message.from_user.id)
    if user and user.get("accept_rules"):
        await message.answer("–ò —Å–Ω–æ–≤–∞ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å ?", reply_markup=main_keyboard)
    else:
        await FormAcceptRules.accept_rules.set()
        await message.answer(
            text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞. –°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã —Å –Ω–∏–º–∏?\n"
            "https://teletype.in/@coiners/Um4d1JbBAgD.",
            reply_markup=accept_rules_keyboard,
        )


async def accept_rules_state(message: types.Message, state: FSMContext):
    if message.text == "–ü—Ä–∏–Ω–∏–º–∞—é":
        user_id = message.from_user.id
        chat_id = message.chat.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        if await is_deleted_user(user_id):
            await recreate_user(user_id)
        else:
            await register_new_user(user_id, chat_id, username, first_name, last_name)
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {await create_invite_link(message)}\n\n"
            f"–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å "
            f"—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–±–µ —Ä–µ–π—Ç–∏–Ω–≥ üòé",
            reply_markup=main_keyboard,
        )
        await state.reset_state()
    elif message.text == "–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é":
        await message.answer(
            "–û—á–µ–Ω—å –∂–∞–ª—å üòì\n–ë–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ !",
            reply_markup=accept_rules_keyboard,
        )


def register_handlers_start(dp: Dispatcher):
    dp.register_message_handler(start, commands=["start"])
    dp.register_message_handler(accept_rules_state, content_types=["text"], state=FormAcceptRules.accept_rules)
    dp.register_message_handler(start, Text(equals=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ ü§ë"))
